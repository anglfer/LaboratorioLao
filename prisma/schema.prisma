model Role {
  id          Int      @id @default(autoincrement())
  nombre      String   @unique @db.VarChar(50)
  descripcion String? @db.VarChar(255)
  usuarios    Usuario[]
}
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Area {
  codigo String   @id @db.VarChar(50)
  nombre String?  @db.VarChar(255)
  obras    Obra[]
  contadorObras ContadorObras[]
}


model Cliente {
  id             Int       @id @default(autoincrement())
  nombre         String?   @db.VarChar(255)
  direccion      String?   @db.VarChar(255)
  fechaRegistro  DateTime? @db.DateTime @map("fecha_registro")
  activo         Boolean?  @default(true)
  telefonos      Telefono[]
  correos        Correo[]
  presupuestos   Presupuesto[]
}

model Telefono {
  id         Int      @id @default(autoincrement())
  clienteId  Int
  telefono   String   @db.VarChar(255)
  cliente    Cliente  @relation(fields: [clienteId], references: [id])

  @@index([clienteId], name: "idx_telefonos_cliente_id")
}

model Correo {
  id         Int      @id @default(autoincrement())
  clienteId  Int
  correo     String   @db.VarChar(255)
  cliente    Cliente  @relation(fields: [clienteId], references: [id])

  @@index([clienteId], name: "idx_correos_cliente_id")
}

model Obra {
  clave        String   @id @db.VarChar(20)
  areaCodigo   String   @db.VarChar(50)
  contratista  String?  @db.VarChar(50)
  estado       Int?     @db.TinyInt
  fechaInicio  DateTime? @db.Timestamp(0) @map("fecha_inicio")
  area         Area     @relation(fields: [areaCodigo], references: [codigo])
  presupuestos Presupuesto[]

  @@index([areaCodigo], name: "idx_obra_area_codigo")
}

model ContadorObras {
  areaCodigo String   @db.VarChar(50)
  año        Int
  contador   Int?     @default(0)
  area       Area     @relation(fields: [areaCodigo], references: [codigo])

  @@id([areaCodigo, año])
}

model Presupuesto {
  id                Int                  @id @default(autoincrement())
  claveObra         String?              @db.VarChar(20) @map("clave_obra")
  clienteId         Int?
  
  // Datos del contratista
  nombreContratista String?              @db.VarChar(255) @map("nombre_contratista")
  
  // Detalles de la obra
  descripcionObra   String?              @db.Text @map("descripcion_obra")
  alcance           String?              @db.Text
  direccion         String?              @db.VarChar(500)
  contactoResponsable String?           @db.VarChar(255) @map("contacto_responsable")
  
  // Totales
  iva              Decimal?             @db.Decimal(5,4) @default(0.1600)
  subtotal         Decimal?             @db.Decimal(12,2) @default(0)
  ivaMonto         Decimal?             @db.Decimal(12,2) @default(0) @map("iva_monto")
  total            Decimal?             @db.Decimal(12,2) @default(0)
  
  // Políticas de pago (solo anticipo)
  manejaAnticipo   Boolean?             @default(false) @map("maneja_anticipo")
  porcentajeAnticipo Decimal?           @db.Decimal(5,2) @map("porcentaje_anticipo")
  
  // Estados y fechas
  estado           PresupuestoEstado?   @default(borrador)
  fechaSolicitud   DateTime?            @db.Timestamp(0) @default(now()) @map("fecha_solicitud")
  razonRechazo     String?              @db.Text @map("razon_rechazo")
  
  // Relaciones
  cliente          Cliente?             @relation(fields: [clienteId], references: [id])
  obra             Obra?                @relation(fields: [claveObra], references: [clave])
  detalles         PresupuestoDetalle[]

  @@index([claveObra], name: "idx_presupuestos_clave_obra")
}

enum PresupuestoEstado {
  borrador
  enviado
  aprobado
  rechazado
  finalizado
}

model PresupuestoDetalle {
  id              Int                @id @default(autoincrement())
  presupuestoId   Int
  conceptoCodigo  String             @db.VarChar(50)
  cantidad        Decimal            @db.Decimal(10,2) @default(1)
  precioUnitario  Decimal            @db.Decimal(10,2)
  subtotal        Decimal?           @db.Decimal(12,2)
  estado          DetalleEstado?     @default(en_proceso)
  
  presupuesto     Presupuesto        @relation(fields: [presupuestoId], references: [id], onDelete: Cascade)
  concepto        ConceptosJerarquicos @relation(fields: [conceptoCodigo], references: [codigo])

  @@index([presupuestoId], name: "idx_presupuestodetalle_presupuesto_id")
  @@index([conceptoCodigo], name: "idx_presupuestodetalle_concepto_codigo")
}

enum DetalleEstado {
  en_proceso
  completado
  cancelado
}

// Módulo de autenticación simplificado (solo para presupuestos)
model Usuario {
  id               Int      @id @default(autoincrement())
  email            String   @unique @db.VarChar(255)
  nombre           String   @db.VarChar(100)
  apellidos        String   @db.VarChar(100)
  password         String   @db.VarChar(255)
  rolId            Int      @map("rol_id")
  activo           Boolean  @default(true)
  ultimoAcceso     DateTime? @map("ultimo_acceso")
  fechaCreacion    DateTime @default(now()) @map("fecha_creacion")
  fechaActualizacion DateTime @updatedAt @map("fecha_actualizacion")

  role             Role     @relation(fields: [rolId], references: [id])

  @@index([rolId], name: "idx_usuario_rol")
  @@index([email], name: "idx_usuario_email")
}

enum RolUsuario {
  admin
  recepcionista
  jefe_laboratorio
}

// Tabla de áreas jerárquicas (estructura de árbol)
model AreasJerarquicas {
  id        Int      @id @default(autoincrement())
  codigo    String   @unique @db.VarChar(20)
  nombre    String   @db.Text
  padreId   Int?     @map("padre_id")
  nivel     Int
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  // Relaciones auto-referenciales para la jerarquía
  padre     AreasJerarquicas? @relation("AreaHierarchy", fields: [padreId], references: [id])
  hijos     AreasJerarquicas[] @relation("AreaHierarchy")
  
  // Relación con conceptos (solo las hojas pueden tener conceptos)
  conceptos ConceptosJerarquicos[]
  
  @@index([nivel], name: "idx_areas_nivel")
  @@index([padreId], name: "idx_areas_padre_id")
  @@index([codigo], name: "idx_areas_codigo")
  @@map("areas_jerarquicas")
}

// Tabla de conceptos (siempre hojas, asociados a un área)
model ConceptosJerarquicos {
  id              Int      @id @default(autoincrement())
  codigo          String   @unique @db.VarChar(20)
  descripcion     String   @db.Text
  unidad          String   @db.VarChar(50)
  precioUnitario  Decimal  @map("precio_unitario") @db.Decimal(10,2)
  areaId          Int      @map("area_id")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  
  // Relación con área padre
  area            AreasJerarquicas @relation(fields: [areaId], references: [id])
  
  // Relaciones con presupuestos
  detalles        PresupuestoDetalle[]
  
  @@index([areaId], name: "idx_conceptos_area_id")
  @@index([codigo], name: "idx_conceptos_codigo")
  @@map("conceptos_jerarquicos")
}
