model Role {
  id          Int      @id @default(autoincrement())
  nombre      String   @unique @db.VarChar(50)
  descripcion String? @db.VarChar(255)
  usuarios    Usuario[]
}
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Area {
  codigo String   @id @db.VarChar(50)
  nombre String?  @db.VarChar(255)
  obras    Obra[]
  contadorObras ContadorObras[]
}


model Cliente {
  id                    Int              @id @default(autoincrement())
  nombre                String?          @db.VarChar(255)  // Nombre o Razón Social
  direccion             String?          @db.VarChar(500)  // Dirección Fiscal o de Contacto u Oficina
  representanteLegal    String?          @db.VarChar(255)  // Nombre del Representante Legal (solo si es empresa)
  contactoPagos         String?          @db.VarChar(255)  // Nombre de Contacto para Seguimiento a Pagos
  telefonoPagos         String?          @db.VarChar(20)   // Teléfono de Contacto para Seguimiento a Pagos
  metodoPago            MetodoPago?      @default(EFECTIVO) // Método de Pago
  correoFacturacion     String?          @db.VarChar(255)  // Correo Electrónico para Envío de Facturas
  fechaRegistro         DateTime?        @db.DateTime @map("fecha_registro")
  activo                Boolean?         @default(true)
  
  // Relaciones
  telefonos             Telefono[]
  correos               Correo[]
  datosFacturacion      DatosFacturacion?
  presupuestos          Presupuesto[]
  obras                 Obra[]
}

// Enum para métodos de pago
enum MetodoPago {
  EFECTIVO
  TRANSFERENCIA
  CHEQUE
}

// Enum para régimen fiscal
enum RegimenFiscal {
  PERSONAS_FISICAS_CON_ACTIVIDADES_EMPRESARIALES
  PERSONAS_MORALES
  REGIMEN_SIMPLIFICADO_DE_CONFIANZA
  PERSONAS_FISICAS_CON_ACTIVIDADES_PROFESIONALES
  REGIMEN_DE_INCORPORACION_FISCAL
  OTROS
}

// Enum para uso de CFDI
enum UsoCFDI {
  GASTOS_EN_GENERAL
  EQUIPOS_DE_COMPUTO
  HONORARIOS_MEDICOS
  GASTOS_MEDICOS
  INTERESES_REALES
  DONACIONES
  OTROS
}

// Enum para tipo de pago
enum TipoPago {
  PUE  // Pago en Una Sola Exhibición
  PPD  // Pago en Parcialidades o Diferido
}

// Tabla normalizada para datos de facturación
model DatosFacturacion {
  id            Int           @id @default(autoincrement())
  clienteId     Int           @unique
  rfc           String        @db.VarChar(13)   // RFC del cliente
  regimenFiscal RegimenFiscal                   // Régimen Fiscal
  usoCfdi       UsoCFDI                         // Uso de CFDI
  tipoPago      TipoPago      @default(PUE)     // PUE o PPD
  
  // Relación con cliente
  cliente       Cliente       @relation(fields: [clienteId], references: [id], onDelete: Cascade)
  
  @@index([clienteId], name: "idx_datos_facturacion_cliente_id")
}

model Telefono {
  id         Int      @id @default(autoincrement())
  clienteId  Int
  telefono   String   @db.VarChar(255)
  cliente    Cliente  @relation(fields: [clienteId], references: [id])

  @@index([clienteId], name: "idx_telefonos_cliente_id")
}

model Correo {
  id         Int      @id @default(autoincrement())
  clienteId  Int
  correo     String   @db.VarChar(255)
  cliente    Cliente  @relation(fields: [clienteId], references: [id])

  @@index([clienteId], name: "idx_correos_cliente_id")
}

model Obra {
  clave                String   @id @db.VarChar(20)
  areaCodigo           String   @db.VarChar(50)
  nombre               String   @db.VarChar(255)
  descripcion          String?  @db.Text
  responsable          String?  @db.VarChar(255)
  contacto             String?  @db.VarChar(255)
  direccion            String?  @db.VarChar(500)
  contratista          String?  @db.VarChar(255)
  estado               Int?     @db.TinyInt
  fechaInicio          DateTime? @db.Timestamp(0) @map("fecha_inicio")
  clienteId            Int?     @map("cliente_id")
  alcance              String?  @db.Text
  razonCancelacion     String?  @db.Text @map("razon_cancelacion")
  fechaCreacion        DateTime @default(now()) @db.DateTime(3) @map("fecha_creacion")
  fechaActualizacion   DateTime @updatedAt @db.DateTime(3) @map("fecha_actualizacion")
  creadoPor            String?  @db.VarChar(255) @map("creado_por")
  actualizadoPor       String?  @db.VarChar(255) @map("actualizado_por")
  
  // Relaciones
  area                 Area     @relation(fields: [areaCodigo], references: [codigo])
  cliente              Cliente? @relation(fields: [clienteId], references: [id])
  presupuestos         Presupuesto[]
  programaciones       Programacion[]

  @@index([areaCodigo], name: "idx_obra_area_codigo")
  @@index([clienteId], name: "idx_obra_cliente_id")
}

model ContadorObras {
  areaCodigo String   @db.VarChar(50)
  año        Int
  contador   Int?     @default(0)
  area       Area     @relation(fields: [areaCodigo], references: [codigo])

  @@id([areaCodigo, año])
}

model Presupuesto {
  id                Int                  @id @default(autoincrement())
  claveObra         String?              @db.VarChar(20) @map("clave_obra")
  clienteId         Int?
  // Propietario del presupuesto (usuario que lo creó)
  usuarioId         Int?
  // Último usuario que modificó el presupuesto
  ultimoUsuarioId   Int?                 @map("ultimo_usuario_id")
  
  // Totales financieros (lo único que realmente pertenece al presupuesto)
  iva              Decimal?             @db.Decimal(5,4) @default(0.1600)
  subtotal         Decimal?             @db.Decimal(12,2) @default(0)
  ivaMonto         Decimal?             @db.Decimal(12,2) @default(0) @map("iva_monto")
  total            Decimal?             @db.Decimal(12,2) @default(0)
  
  // Políticas de pago
  manejaAnticipo   Boolean?             @default(false) @map("maneja_anticipo")
  porcentajeAnticipo Decimal?           @db.Decimal(5,2) @map("porcentaje_anticipo")
  
  // Estados y fechas
  estado           PresupuestoEstado?   @default(borrador)
  fechaSolicitud   DateTime?            @db.Timestamp(0) @default(now()) @map("fecha_solicitud")
  razonRechazo     String?              @db.Text @map("razon_rechazo")
  tipoAprobacion   TipoAprobacion?      @map("tipo_aprobacion")
  updatedAt        DateTime             @updatedAt @map("updated_at")
  
  // Relaciones
  cliente          Cliente?             @relation(fields: [clienteId], references: [id])
  obra             Obra?                @relation(fields: [claveObra], references: [clave])
  usuario          Usuario?             @relation("UsuarioPresupuestosCreados", fields: [usuarioId], references: [id])
  ultimoUsuario    Usuario?             @relation("UsuarioPresupuestosUltimaMod", fields: [ultimoUsuarioId], references: [id])
  detalles         PresupuestoDetalle[]
  programaciones   Programacion[]

  @@index([claveObra], name: "idx_presupuestos_clave_obra")
  @@index([usuarioId], name: "idx_presupuestos_usuario_id")
  @@index([ultimoUsuarioId], name: "idx_presupuestos_ultimo_usuario_id")
}

enum PresupuestoEstado {
  borrador
  enviado
  aprobado
  rechazado
  finalizado
}

enum TipoAprobacion {
  cliente
  interno
}

model PresupuestoDetalle {
  id              Int                @id @default(autoincrement())
  presupuestoId   Int
  conceptoCodigo  String             @db.VarChar(50)
  cantidad        Decimal            @db.Decimal(10,2) @default(1)
  precioUnitario  Decimal            @db.Decimal(10,2)
  subtotal        Decimal?           @db.Decimal(12,2)
  estado          DetalleEstado?     @default(en_proceso)
  
  presupuesto     Presupuesto        @relation(fields: [presupuestoId], references: [id], onDelete: Cascade)
  concepto        ConceptosJerarquicos @relation(fields: [conceptoCodigo], references: [codigo])

  @@index([presupuestoId], name: "idx_presupuestodetalle_presupuesto_id")
  @@index([conceptoCodigo], name: "idx_presupuestodetalle_concepto_codigo")
}

enum DetalleEstado {
  en_proceso
  completado
  cancelado
}

// Módulo de autenticación simplificado (solo para presupuestos)
model Usuario {
  id               Int      @id @default(autoincrement())
  email            String   @unique @db.VarChar(255)
  nombre           String   @db.VarChar(100)
  apellidos        String   @db.VarChar(100)
  password         String   @db.VarChar(255)
  rolId            Int      @map("rol_id")
  activo           Boolean  @default(true)
  ultimoAcceso     DateTime? @map("ultimo_acceso")
  fechaCreacion    DateTime @default(now()) @map("fecha_creacion")
  fechaActualizacion DateTime @updatedAt @map("fecha_actualizacion")

  role             Role     @relation(fields: [rolId], references: [id])
  presupuestosCreados     Presupuesto[] @relation("UsuarioPresupuestosCreados")
  presupuestosUltimaMod   Presupuesto[] @relation("UsuarioPresupuestosUltimaMod")
  programacionesCreadas   Programacion[] @relation("UsuarioProgramacionesCreadas")
  programacionesActualizadas Programacion[] @relation("UsuarioProgramacionesActualizadas")

  @@index([rolId], name: "idx_usuario_rol")
  @@index([email], name: "idx_usuario_email")
}

enum RolUsuario {
  admin
  recepcionista
  jefe_laboratorio
}

// Tabla de áreas jerárquicas (estructura de árbol)
model AreasJerarquicas {
  id        Int      @id @default(autoincrement())
  codigo    String   @unique @db.VarChar(20)
  nombre    String   @db.Text
  padreId   Int?     @map("padre_id")
  nivel     Int
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  // Relaciones auto-referenciales para la jerarquía
  padre     AreasJerarquicas? @relation("AreaHierarchy", fields: [padreId], references: [id])
  hijos     AreasJerarquicas[] @relation("AreaHierarchy")
  
  // Relación con conceptos (solo las hojas pueden tener conceptos)
  conceptos ConceptosJerarquicos[]
  
  @@index([nivel], name: "idx_areas_nivel")
  @@index([padreId], name: "idx_areas_padre_id")
  @@index([codigo], name: "idx_areas_codigo")
  @@map("areas_jerarquicas")
}

// Tabla de conceptos (siempre hojas, asociados a un área)
model ConceptosJerarquicos {
  id              Int      @id @default(autoincrement())
  codigo          String   @unique @db.VarChar(20)
  descripcion     String   @db.Text
  unidad          String   @db.VarChar(50)
  precioUnitario  Decimal  @map("precio_unitario") @db.Decimal(10,2)
  areaId          Int      @map("area_id")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  
  // Relación con área padre
  area            AreasJerarquicas @relation(fields: [areaId], references: [id])
  
  // Relaciones con presupuestos
  detalles        PresupuestoDetalle[]
  programacionDetalles ProgramacionDetalle[]
  
  @@index([areaId], name: "idx_conceptos_area_id")
  @@index([codigo], name: "idx_conceptos_codigo")
  @@map("conceptos_jerarquicos")
}

// ========== MÓDULO DE PROGRAMACIÓN ==========

// Tabla de Brigadistas
model Brigadista {
  id                 Int      @id @default(autoincrement())
  nombre             String   @db.VarChar(100)
  apellidos          String   @db.VarChar(100)
  telefono           String?  @db.VarChar(20)
  email              String?  @db.VarChar(255)
  activo             Boolean  @default(true)
  fechaRegistro      DateTime @default(now()) @map("fecha_registro")
  fechaActualizacion DateTime @updatedAt @map("fecha_actualizacion")
  
  // Relaciones
  programacionesPrincipal  Programacion[] @relation("BrigadistaPrincipal")
  programacionesApoyo      Programacion[] @relation("BrigadistaApoyo")
  
  @@index([activo], name: "idx_brigadista_activo")
  @@map("brigadistas")
}

// Tabla de Vehículos
model Vehiculo {
  id                 Int      @id @default(autoincrement())
  clave              String   @unique @db.VarChar(20)
  marca              String?  @db.VarChar(50)
  modelo             String?  @db.VarChar(50)
  año                Int?
  placas             String?  @db.VarChar(15)
  activo             Boolean  @default(true)
  fechaRegistro      DateTime @default(now()) @map("fecha_registro")
  fechaActualizacion DateTime @updatedAt @map("fecha_actualizacion")
  
  // Relaciones
  programaciones     Programacion[]
  
  @@index([activo], name: "idx_vehiculo_activo")
  @@index([clave], name: "idx_vehiculo_clave")
  @@map("vehiculos")
}

// Estados de la programación
enum EstadoProgramacion {
  programada
  en_proceso
  completada
  cancelada
  reprogramada
}

// Tipos de recolección
enum TipoRecoleccion {
  metros_cuadrados
  metros_cubicos
  metros_lineales
  sondeo
  piezas
  condensacion
}

// Tipos de programación
enum TipoProgramacion {
  obra_por_visita
  obra_por_estancia
}

// Tabla principal de Programaciones
model Programacion {
  id                    Int                 @id @default(autoincrement())
  // Vinculación con presupuesto aprobado
  presupuestoId         Int                 @map("presupuesto_id")
  claveObra             String              @db.VarChar(20) @map("clave_obra")
  
  // Información temporal
  fechaProgramada       DateTime            @map("fecha_programada")
  horaProgramada        String              @db.VarChar(10) @map("hora_programada") // "HH:MM"
  tipoProgramacion      TipoProgramacion    @map("tipo_programacion")
  
  // Información de contacto
  nombreResidente       String?             @db.VarChar(255) @map("nombre_residente")
  telefonoResidente     String?             @db.VarChar(20) @map("telefono_residente")
  observacionesIniciales String?            @db.Text @map("observaciones_iniciales")
  
  // Asignación de recursos
  brigadistaPrincipalId Int                 @map("brigadista_principal_id")
  brigadistaApoyoId     Int?                @map("brigadista_apoyo_id")
  vehiculoId            Int                 @map("vehiculo_id")
  claveEquipo           String?             @db.VarChar(50) @map("clave_equipo")
  herramientasEspeciales String?           @db.Text @map("herramientas_especiales")
  
  // Observaciones y notas
  observacionesProgramacion String?         @db.Text @map("observaciones_programacion")
  instruccionesBrigadista   String?         @db.Text @map("instrucciones_brigadista")
  condicionesEspeciales     String?         @db.Text @map("condiciones_especiales")
  
  // Estado y seguimiento
  estado                EstadoProgramacion  @default(programada)
  motivoCancelacion     String?             @db.Text @map("motivo_cancelacion")
  observacionesComplecion String?           @db.Text @map("observaciones_complecion")
  
  // Fechas de control
  fechaCreacion         DateTime            @default(now()) @map("fecha_creacion")
  fechaActualizacion    DateTime            @updatedAt @map("fecha_actualizacion")
  fechaInicio           DateTime?           @map("fecha_inicio")
  fechaComplecion       DateTime?           @map("fecha_complecion")
  
  // Usuario que creó la programación
  creadoPor             Int?                @map("creado_por")
  actualizadoPor        Int?                @map("actualizado_por")
  
  // Relaciones
  presupuesto           Presupuesto         @relation(fields: [presupuestoId], references: [id])
  obra                  Obra                @relation(fields: [claveObra], references: [clave])
  brigadistaPrincipal   Brigadista          @relation("BrigadistaPrincipal", fields: [brigadistaPrincipalId], references: [id])
  brigadistaApoyo       Brigadista?         @relation("BrigadistaApoyo", fields: [brigadistaApoyoId], references: [id])
  vehiculo              Vehiculo            @relation(fields: [vehiculoId], references: [id])
  usuarioCreador        Usuario?            @relation("UsuarioProgramacionesCreadas", fields: [creadoPor], references: [id])
  usuarioActualizador   Usuario?            @relation("UsuarioProgramacionesActualizadas", fields: [actualizadoPor], references: [id])
  
  // Detalles de actividades/conceptos
  detalles              ProgramacionDetalle[]
  
  @@index([presupuestoId], name: "idx_programacion_presupuesto_id")
  @@index([claveObra], name: "idx_programacion_clave_obra")
  @@index([estado], name: "idx_programacion_estado")
  @@index([fechaProgramada], name: "idx_programacion_fecha_programada")
  @@index([brigadistaPrincipalId], name: "idx_programacion_brigadista_principal")
  @@index([vehiculoId], name: "idx_programacion_vehiculo")
  @@map("programaciones")
}

// Detalles de las actividades/conceptos en cada programación
model ProgramacionDetalle {
  id                    Int                 @id @default(autoincrement())
  programacionId        Int                 @map("programacion_id")
  conceptoCodigo        String              @db.VarChar(50) @map("concepto_codigo")
  
  // Configuración de muestras
  cantidadMuestras      Int                 @map("cantidad_muestras")
  tipoRecoleccion       TipoRecoleccion     @map("tipo_recoleccion")
  distribucionMuestras  String?             @db.Text @map("distribucion_muestras") // JSON o descripción
  
  // Resultados (se llena al completar)
  muestrasObtenidas     Int?                @map("muestras_obtenidas")
  observaciones         String?             @db.Text
  
  // ¿Es un concepto no presupuestado?
  esNoPresupuestado     Boolean             @default(false) @map("es_no_presupuestado")
  descripcionConcepto   String?             @db.Text @map("descripcion_concepto") // Solo para conceptos no presupuestados
  unidadMedida          String?             @db.VarChar(50) @map("unidad_medida") // Solo para conceptos no presupuestados
  
  // Fechas
  fechaCreacion         DateTime            @default(now()) @map("fecha_creacion")
  fechaActualizacion    DateTime            @updatedAt @map("fecha_actualizacion")
  
  // Relaciones
  programacion          Programacion        @relation(fields: [programacionId], references: [id], onDelete: Cascade)
  concepto              ConceptosJerarquicos? @relation(fields: [conceptoCodigo], references: [codigo])
  
  @@index([programacionId], name: "idx_programacion_detalle_programacion_id")
  @@index([conceptoCodigo], name: "idx_programacion_detalle_concepto_codigo")
  @@map("programacion_detalles")
}
