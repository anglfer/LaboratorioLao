import { areasJerarquicasService } from "../services/areasJerarquicasService";
import { conceptosJerarquicosService } from "../services/conceptosJerarquicosService";

interface ConceptoImportacion {
  codigo: string;
  descripcion: string;
  tipo?: string;
  porcentaje?: number;
  precio?: number;
  unidad?: string;
}

interface AreaImportacion {
  codigo: string;
  nombre: string;
  nivel: number;
  conceptos?: ConceptoImportacion[];
  hijos?: AreaImportacion[];
}

export class ImportadorConceptos {
  private static lineasTextoOriginal: string[] = [];
  
  /**
   * Procesa texto pegado y lo convierte en estructura jer√°rquica
   */
  static procesarTextoPegado(texto: string): AreaImportacion[] {
    // Primero, reconstruir l√≠neas que se rompieron por descripciones multi-l√≠nea
    const lineasRaw = texto.split('\n');
    const lineasLimpias: string[] = [];
    
    let lineaActual = '';
    for (const linea of lineasRaw) {
      const lineaLimpia = linea.trim();
      if (!lineaLimpia) continue;
      
      // Si la l√≠nea empieza con un c√≥digo (n√∫mero.n√∫mero), es una nueva l√≠nea
      const empiezaConCodigo = /^\d+(\.\d+)*(\s*\(\+\))?\s/.test(lineaLimpia);
      
      // Si la l√≠nea es solo "INCLUYE:" o empieza con "INCLUYE:", es continuaci√≥n
      const esLineaIncluye = /^(INCLUYE:|Se incluye:|incluye:)/i.test(lineaLimpia);
      
      // Si la l√≠nea empieza con gui√≥n o asterisco, es una lista (continuaci√≥n)
      const esLineaLista = /^[-*‚Ä¢]\s/.test(lineaLimpia);
      
      // Si la l√≠nea no empieza con c√≥digo y no es claramente una nueva secci√≥n, es continuaci√≥n
      const esLineaContinuacion = !empiezaConCodigo && (
        esLineaIncluye ||
        esLineaLista ||
        lineaLimpia.startsWith('(') ||  // M√©todos como "(M√©todo no acreditado)"
        lineaLimpia.includes('determinaci√≥n') ||
        lineaLimpia.includes('an√°lisis') ||
        lineaLimpia.includes('reporte') ||
        lineaLimpia.includes('laboratorio') ||
        lineaLimpia.includes('horario') ||
        lineaLimpia.includes('Personal y equipo') ||
        lineaLimpia.includes('Informe de resultados') ||
        lineaLimpia.includes('granulom√©trico') ||
        lineaLimpia.includes('volum√©trica') ||
        lineaLimpia.includes('M√©todo acreditado') ||
        lineaLimpia.includes('M√©todo no acreditado') ||
        /^[a-z]/.test(lineaLimpia) || // Empieza con min√∫scula (continuaci√≥n)
        lineaLimpia.length < 50 // L√≠neas m√°s cortas probablemente son continuaci√≥n
      );
      
      if (empiezaConCodigo && lineaActual) {
        // Guardar la l√≠nea anterior y empezar una nueva
        lineasLimpias.push(lineaActual);
        lineaActual = lineaLimpia;
      } else if (empiezaConCodigo) {
        // Primera l√≠nea con c√≥digo
        lineaActual = lineaLimpia;
      } else if (lineaActual && esLineaContinuacion) {
        // Continuar la l√≠nea anterior (descripci√≥n multi-l√≠nea)
        lineaActual += ' ' + lineaLimpia;
      } else if (lineaActual) {
        // L√≠nea independiente que podr√≠a ser un √°rea
        lineasLimpias.push(lineaActual);
        lineaActual = lineaLimpia;
      } else {
        // Primera l√≠nea sin c√≥digo
        lineaActual = lineaLimpia;
      }
    }
    
    // No olvidar la √∫ltima l√≠nea
    if (lineaActual) {
      lineasLimpias.push(lineaActual);
    }
    
    // Guardar las l√≠neas para b√∫squeda de nombres
    this.lineasTextoOriginal = lineasLimpias;
    
    console.log('üìã L√≠neas reconstruidas:', lineasLimpias.length);
    console.log('üîç Primeras 3 l√≠neas:', lineasLimpias.slice(0, 3));
    
    const estructura: AreaImportacion[] = [];
    const pilaAreas: AreaImportacion[] = [];
    const areasCreadas = new Map<string, AreaImportacion>(); // Mapa de √°reas ya creadas

    for (const linea of lineasLimpias) {
      console.log('üîç Procesando l√≠nea completa:', linea.substring(0, 100) + '...');

      // Detectar si es √°rea o concepto
      if (this.esArea(linea)) {
        const area = this.parsearArea(linea);
        console.log('üìÅ √Årea detectada:', area);
        this.insertarArea(area, estructura, pilaAreas);
        areasCreadas.set(area.codigo, area);
      } else if (this.esConcepto(linea)) {
        const concepto = this.parsearConcepto(linea);
        console.log('üìÑ Concepto detectado:', concepto);
        
        // Verificar si necesitamos crear √°reas padre faltantes
        this.crearAreaspadresFaltantes(concepto.codigo, estructura, pilaAreas, areasCreadas);
        
        this.agregarConceptoAArea(concepto, pilaAreas);
      } else {
        console.log('‚ö†Ô∏è L√≠nea no reconocida como √°rea ni concepto:', linea.substring(0, 50) + '...');
      }
    }

    console.log('üèóÔ∏è Estructura final generada:', estructura);
    return estructura;
  }

  /**
   * Crea √°reas padre faltantes para un concepto bas√°ndose en su c√≥digo
   */
  private static crearAreaspadresFaltantes(
    codigoConcepto: string, 
    estructura: AreaImportacion[], 
    pilaAreas: AreaImportacion[], 
    areasCreadas: Map<string, AreaImportacion>
  ) {
    // Extraer las partes del c√≥digo (ej: "1.1.17" -> necesita √°reas "1" y "1.1")
    const partescodigo = codigoConcepto.split('.');
    const codigosPadre: string[] = [];
    
    // IMPORTANTE: Empezar desde i=0 para crear TODAS las √°reas padre necesarias
    for (let i = 1; i < partescodigo.length; i++) {
      const codigoPadre = partescodigo.slice(0, i).join('.');
      codigosPadre.push(codigoPadre);
    }
    
    console.log(`üîß Verificando √°reas padre para concepto ${codigoConcepto}:`, codigosPadre);
    
    // Crear cada √°rea padre que no exista
    for (const codigoPadre of codigosPadre) {
      if (!areasCreadas.has(codigoPadre)) {
        console.log(`üìÅ Creando √°rea padre faltante: ${codigoPadre}`);
        
        const areaPadre: AreaImportacion = {
          codigo: codigoPadre,
          nombre: this.buscarNombreAreaEnTexto(codigoPadre) || this.generarNombreAreaAutomatica(codigoPadre),
          nivel: (codigoPadre.match(/\./g) || []).length + 1,
          conceptos: [],
          hijos: []
        };
        
        this.insertarArea(areaPadre, estructura, pilaAreas);
        areasCreadas.set(codigoPadre, areaPadre);
      }
    }
    
    // Asegurar que la pila est√© en el estado correcto para el concepto
    // El concepto debe ir en el √°rea padre inmediato
    const codigoPadreConcepto = partescodigo.slice(0, -1).join('.');
    if (codigoPadreConcepto && areasCreadas.has(codigoPadreConcepto)) {
      const areaPadre = areasCreadas.get(codigoPadreConcepto)!;
      
      // Ajustar la pila para que el √°rea padre est√© en el tope
      while (pilaAreas.length > 0 && pilaAreas[pilaAreas.length - 1].codigo !== codigoPadreConcepto) {
        pilaAreas.pop();
      }
      
      // Si el √°rea padre no est√° en la pila, a√±adirla
      if (pilaAreas.length === 0 || pilaAreas[pilaAreas.length - 1].codigo !== codigoPadreConcepto) {
        // Reconstruir la pila hasta el √°rea padre
        const nivelesNecesarios = areaPadre.nivel;
        pilaAreas.length = 0; // Limpiar pila
        
        // A√±adir todas las √°reas desde la ra√≠z hasta el padre
        let codigoActual = '';
        const partesCompletas = codigoPadreConcepto.split('.');
        for (let i = 0; i < partesCompletas.length; i++) {
          codigoActual = partesCompletas.slice(0, i + 1).join('.');
          if (areasCreadas.has(codigoActual)) {
            pilaAreas.push(areasCreadas.get(codigoActual)!);
          }
        }
      }
    }
  }

  /**
   * Busca el nombre de un √°rea en el texto original bas√°ndose en su c√≥digo
   */
  private static buscarNombreAreaEnTexto(codigo: string): string | null {
    // Buscar en las l√≠neas una que empiece con el c√≥digo y tenga un nombre
    for (const linea of this.lineasTextoOriginal) {
      const partes = linea.split('\t');
      if (partes.length >= 2) {
        const codigoLinea = partes[0]?.trim();
        const nombreLinea = partes[1]?.trim();
        
        // Si el c√≥digo coincide exactamente y tiene un nombre v√°lido
        if (codigoLinea === codigo && nombreLinea && 
            !nombreLinea.includes('$') && 
            !nombreLinea.includes('INCLUYE:') &&
            nombreLinea.length < 100 &&
            !/^["']/.test(nombreLinea)) {
          console.log(`‚úÖ Nombre encontrado para √°rea ${codigo}: "${nombreLinea}"`);
          return nombreLinea;
        }
      }
    }
    
    console.log(`‚ö†Ô∏è No se encontr√≥ nombre expl√≠cito para √°rea ${codigo}, usando nombre autom√°tico`);
    return null;
  }

  /**
   * Genera un nombre autom√°tico para √°reas creadas impl√≠citamente
   */
  private static generarNombreAreaAutomatica(codigo: string): string {
    const nivel = (codigo.match(/\./g) || []).length + 1;
    const nombres = {
      1: '√ÅREA PRINCIPAL',
      2: 'CATEGOR√çA',
      3: 'SUBCATEGOR√çA'
    };
    
    return nombres[nivel as keyof typeof nombres] || `√ÅREA ${codigo}`;
  }
  /**
   * Determina si una l√≠nea es un √°rea (solo √°reas expl√≠citas con 1-2 niveles)
   */
  private static esArea(linea: string): boolean {
    const partes = linea.split('\t');
    if (partes.length < 2) return false;
    
    const codigo = partes[0]?.trim();
    const nombre = partes[1]?.trim();
    
    // Si empieza con "INCLUYE:" o "Se incluye:" definitivamente NO es √°rea
    if (codigo.startsWith('INCLUYE:') || nombre.startsWith('INCLUYE:') ||
        codigo.startsWith('Se incluye:') || nombre.startsWith('Se incluye:') ||
        codigo.startsWith('incluye:') || nombre.startsWith('incluye:')) return false;
    
    // Verificar que el c√≥digo sea num√©rico con puntos
    const codigoValido = /^\d+(\.\d+)*$/.test(codigo);
    
    // Contar niveles en el c√≥digo (puntos + 1)
    const niveles = (codigo?.match(/\./g) || []).length + 1;
    
    // Solo √°reas expl√≠citas con 1-2 niveles (como "2", "2.1")
    // Los conceptos siempre tienen 3+ niveles
    const esNivelArea = niveles <= 2;
    
    // Verificar que el nombre sea texto sin indicadores de concepto
    const nombreValido = nombre && 
                        nombre.length > 0 && 
                        !nombre.includes('$') &&
                        !nombre.includes('INCLUYE:') &&
                        !nombre.includes('Se incluye:') &&
                        !nombre.includes('incluye:') &&
                        nombre.length < 100 && // √Åreas tienen nombres cortos
                        !/^["']/.test(nombre); // No empieza con comillas
    
    const esArea = codigoValido && esNivelArea && !!nombreValido;
    console.log(`üîç Verificando si es √°rea: "${codigo}" (${niveles} niveles) + "${nombre}" = ${esArea}`);
    
    return esArea;
  }

  /**
   * Determina si una l√≠nea es un concepto
   */
  private static esConcepto(linea: string): boolean {
    const partes = linea.split('\t');
    if (partes.length < 2) return false;
    
    const codigo = partes[0]?.trim();
    const descripcion = partes[1]?.trim();
    
    // Si la l√≠nea empieza solo con "INCLUYE:" sin c√≥digo, NO es concepto
    if (codigo.startsWith('INCLUYE:') || !codigo) return false;
    
    // Verificar que tenga un c√≥digo v√°lido 
    const codigoMatch = codigo?.match(/^(\d+(\.\d+)*)/);
    if (!codigoMatch) return false;
    
    const codigoLimpio = codigoMatch[1];
    const niveles = (codigoLimpio.match(/\./g) || []).length + 1;
    
    // Criterios para identificar conceptos:
    
    // 1. Tiene 3+ niveles de c√≥digo (como 1.1.17, 2.1.1.1) - AUTOM√ÅTICAMENTE es concepto
    const esNivelConcepto = niveles >= 3;
    
    // 2. Tiene indicadores expl√≠citos de concepto
    const tieneIndicadores = linea.includes('(+)') || 
                           linea.includes('$') || 
                           linea.includes('PRUEBA') || 
                           linea.includes('ENSAYE') || 
                           linea.includes('VISITA') ||
                           linea.includes('MUESTRA') ||
                           linea.includes('POZO') ||
                           linea.includes('C√ÅRCAMO') ||
                           linea.includes('ESTACI√ìN') ||
                           linea.includes('ESTUDIO') ||
                           (linea.includes('INCLUYE:') && !!codigo.match(/^\d+(\.\d+)*/)) || // Solo si tiene c√≥digo v√°lido
                           (linea.includes('Se incluye:') && !!codigo.match(/^\d+(\.\d+)*/)) || // Variante de "Se incluye"
                           (linea.includes('incluye:') && !!codigo.match(/^\d+(\.\d+)*/)) || // Variante min√∫scula
                           /^["']/.test(descripcion); // Empieza con comillas

    // 3. Tiene descripci√≥n detallada (m√°s de 50 caracteres sugiere concepto detallado)
    const tieneDescripcionDetallada = descripcion && descripcion.length > 50;
    
    // 4. Contiene palabras t√©cnicas espec√≠ficas
    const tienePalabrasTecnicas = descripcion && (
      descripcion.includes('PROFUNDIDAD') ||
      descripcion.includes('DI√ÅMETRO') ||
      descripcion.includes('COMPACTACI√ìN') ||
      descripcion.includes('EXCAVACI√ìN') ||
      descripcion.includes('MUESTREO') ||
      descripcion.includes('PERFORACI√ìN') ||
      descripcion.includes('TRASLADO') ||
      descripcion.includes('DESGASTE') ||
      descripcion.includes('AGREGADO') ||
      descripcion.includes('CONCRETO') ||
      descripcion.includes('HIDR√ÅULICO') ||
      descripcion.includes('GRANULOM√âTRICO') ||
      descripcion.includes('VOLUM√âTRICA') ||
      descripcion.includes('ATTERBERG') ||
      descripcion.includes('DENSIDAD') ||
      descripcion.includes('ABSORCI√ìN') ||
      descripcion.includes('COLORIMETR√çA') ||
      descripcion.includes('Personal y equipo') ||
      descripcion.includes('Informe de resultados') ||
      descripcion.includes('M√©todo acreditado') ||
      descripcion.includes('M√©todo no acreditado')
    );    // REGLA PRINCIPAL: 3+ niveles SIEMPRE es concepto
    // REGLA SECUNDARIA: 2 niveles + indicadores/descripci√≥n detallada tambi√©n es concepto
    const esConcepto = esNivelConcepto || 
                      (niveles >= 2 && (tieneIndicadores || tieneDescripcionDetallada || !!tienePalabrasTecnicas));
    
    console.log(`üìÑ Verificando si es concepto: "${codigo}" (${niveles} niveles) autom√°tico=${esNivelConcepto} indicadores=${tieneIndicadores} = ${esConcepto}`);
    
    return esConcepto;
  }

  /**
   * Parsea una l√≠nea de √°rea
   */
  private static parsearArea(linea: string): AreaImportacion {
    const partes = linea.split('\t').filter(p => p.trim());
    const codigo = partes[0]?.trim() || '';
    const nombre = partes[1]?.trim() || '';
    
    const nivel = (codigo.match(/\./g) || []).length + 1;

    return {
      codigo,
      nombre,
      nivel,
      conceptos: [],
      hijos: []
    };
  }

  /**
   * Parsea una l√≠nea de concepto
   */
  private static parsearConcepto(linea: string): ConceptoImportacion {
    const partes = linea.split('\t').filter(p => p.trim());
    
    let codigo = '';
    let descripcion = '';
    let tipo = '';
    let porcentaje = 0;
    let precio = 0;

    // Buscar c√≥digo (primera parte con patr√≥n de n√∫meros y puntos, con o sin (+))
    if (partes[0]) {
      // Mejorado: busca c√≥digo con o sin (+) al final
      const codigoMatch = partes[0].match(/^(\d+(?:\.\d+)*)\s*(?:\(\+\))?/);
      if (codigoMatch) {
        codigo = codigoMatch[1];
      }
    }

    // Buscar descripci√≥n (puede estar en varias columnas)
    const descripcionPartes = [];
    let unidadDetectada = '';
    
    for (let i = 1; i < partes.length; i++) {
      const parte = partes[i].trim();
      
      // Si es un precio, porcentaje o tipo identificado, no incluir en descripci√≥n
      if (parte.match(/\$/) || parte.match(/\d+%/) || parte.match(/#\w+/)) {
        continue;
      }
      
      // Detectar unidades espec√≠ficas en columnas separadas (lista completa del laboratorio)
      const unidadesValidas = [
        'POZO', 'MUESTRA', 'PRUEBA', 'VISITA', 'ENSAYE', 'C√ÅRCAMO', 'ESTACI√ìN', 'VIAJE', 'ESTUDIO',
        'LOTE', 'MES', 'C√ÅLCULO', 'DISE√ëO', 'AN√ÅLISIS', 'INFORME', 'SERVICIO', 'JUEGO', 'PERMISO',
        'ESP√âCIMEN', 'PIEZA', 'JORNAL', 'SPOT', 'PROBETA', 'SEMANA', 'D√çA', 'TOPOGRAF√çA', 'HOJA',
        'SERIE', 'ENSAYO', 'm', 'cm', 'mm', 'm¬≤', 'm2', 'm¬≥', 'm3', 'h', 'mL', 'EQ', 'AFORO', 
        'CALCULO', 'PROY', 'RECOMEND', 'REPORTE', 'PZA', 'km',
        // Tambi√©n versiones en min√∫sculas
        'pozo', 'muestra', 'prueba', 'visita', 'ensaye', 'c√°rcamo', 'estaci√≥n', 'viaje', 'estudio',
        'lote', 'mes', 'c√°lculo', 'dise√±o', 'an√°lisis', 'informe', 'servicio', 'juego', 'permiso',
        'esp√©cimen', 'pieza', 'jornal', 'spot', 'probeta', 'semana', 'd√≠a', 'topograf√≠a', 'hoja',
        'serie', 'ensayo', 'pza', 'kg', 'g', 'mg', 's', 'min', 'L'
      ];
      
      if (unidadesValidas.includes(parte)) {
        unidadDetectada = parte;
        continue;
      }
      
      // Si es un tipo identificado, no incluir en descripci√≥n pero guardarlo
      const tiposValidos = [
        'VISITA', 'PRUEBA', 'ENSAYE', 'MUESTRA', 'ESTUDIO', 'POZO', 'C√ÅRCAMO', 'ESTACI√ìN',
        'VIAJE', 'LOTE', 'MES', 'C√ÅLCULO', 'CALCULO', 'DISE√ëO', 'AN√ÅLISIS', 'INFORME', 'SERVICIO',
        'JUEGO', 'PERMISO', 'ESP√âCIMEN', 'PIEZA', 'JORNAL', 'SPOT', 'PROBETA',
        'SEMANA', 'D√çA', 'TOPOGRAF√çA', 'HOJA', 'SERIE', 'ENSAYO', 'PROY', 'RECOMEND', 'REPORTE', 'PZA'
      ];
      
      if (tiposValidos.some(t => parte.includes(t))) {
        if (!tipo) tipo = parte.trim(); // Mantener en may√∫scula como aparece en el texto
        continue;
      }
      
      // Agregar a descripci√≥n
      if (parte) {
        descripcionPartes.push(parte);
      }
    }
    
    // Unir todas las partes de la descripci√≥n
    descripcion = descripcionPartes.join(' ').replace(/^"/, '').replace(/"$/, '').trim();

    // Si no encontr√≥ descripci√≥n, buscar en la segunda columna directamente
    if (!descripcion && partes[1]) {
      descripcion = partes[1].replace(/^"/, '').replace(/"$/, '').trim();
    }

    // Buscar tipo (VISITA, PRUEBA, etc.) - b√∫squeda adicional si no se encontr√≥ antes
    if (!tipo) {
      for (const parte of partes) {
        if (['VISITA', 'PRUEBA', 'ENSAYE', 'MUESTRA', 'ESTUDIO', 'POZO', 'C√ÅRCAMO', 'ESTACI√ìN',
             'VIAJE', 'LOTE', 'MES', 'C√ÅLCULO', 'DISE√ëO', 'AN√ÅLISIS', 'INFORME', 'SERVICIO',
             'JUEGO', 'PERMISO', 'ESP√âCIMEN', 'PIEZA', 'JORNAL', 'SPOT', 'PROBETA',
             'SEMANA', 'D√çA', 'TOPOGRAF√çA', 'HOJA', 'SERIE', 'ENSAYO'].some(t => parte.includes(t))) {
          tipo = parte.trim();
          break;
        }
      }
    }

    // Buscar porcentaje
    for (const parte of partes) {
      const porcentajeMatch = parte.match(/(\d+)%/);
      if (porcentajeMatch) {
        porcentaje = parseInt(porcentajeMatch[1]);
        break;
      }
    }

    // Buscar precio
    for (const parte of partes) {
      const precioMatch = parte.match(/\$\s*([\d,]+\.?\d*)/);
      if (precioMatch) {
        precio = parseFloat(precioMatch[1].replace(/,/g, ''));
        break;
      }
    }

    const concepto = {
      codigo,
      descripcion,
      tipo,
      porcentaje,
      precio,
      unidad: unidadDetectada || this.determinarUnidad(tipo, descripcion)
    };
    
    console.log(`üìã Concepto parseado:`, concepto);
    return concepto;
  }

  /**
   * Determina la unidad basada en el tipo y descripci√≥n (lista exacta del laboratorio)
   */
  private static determinarUnidad(tipo: string, descripcion: string): string {
    // Lista exacta de unidades del laboratorio
    const unidadesValidas = [
      'POZO', 'MUESTRA', 'PRUEBA', 'VISITA', 'ENSAYE', 'C√ÅRCAMO', 'ESTACI√ìN', 'VIAJE', 'ESTUDIO',
      'LOTE', 'MES', 'C√ÅLCULO', 'DISE√ëO', 'AN√ÅLISIS', 'INFORME', 'SERVICIO', 'JUEGO', 'PERMISO',
      'ESP√âCIMEN', 'PIEZA', 'JORNAL', 'SPOT', 'PROBETA', 'SEMANA', 'D√çA', 'TOPOGRAF√çA', 'HOJA',
      'SERIE', 'ENSAYO', 'm', 'cm', 'mm', 'm¬≤', 'm2', 'm¬≥', 'm3', 'h', 'mL', 'EQ', 'AFORO', 
      'CALCULO', 'PROY', 'RECOMEND', 'REPORTE', 'PZA', 'km'
    ];

    // Si el tipo ya es una unidad v√°lida, usarla directamente
    if (tipo && unidadesValidas.includes(tipo.toUpperCase())) {
      return tipo.toUpperCase();
    }

    // Mapeo espec√≠fico para tipos conocidos
    const mapeoTipos: { [key: string]: string } = {
      'VISITA': 'VISITA',
      'PRUEBA': 'PRUEBA', 
      'MUESTRA': 'MUESTRA',
      'POZO': 'POZO',
      'C√ÅRCAMO': 'C√ÅRCAMO',
      'ESTACI√ìN': 'ESTACI√ìN',
      'ENSAYE': 'ENSAYE',
      'VIAJE': 'VIAJE',
      'LOTE': 'LOTE',
      'MES': 'MES',
      'C√ÅLCULO': 'C√ÅLCULO',
      'CALCULO': 'CALCULO',
      'DISE√ëO': 'DISE√ëO',
      'AN√ÅLISIS': 'AN√ÅLISIS',
      'INFORME': 'INFORME',
      'ESTUDIO': 'ESTUDIO',
      'SERVICIO': 'SERVICIO',
      'JUEGO': 'JUEGO',
      'PERMISO': 'PERMISO',
      'ESP√âCIMEN': 'ESP√âCIMEN',
      'PIEZA': 'PIEZA',
      'JORNAL': 'JORNAL',
      'SPOT': 'SPOT',
      'PROBETA': 'PROBETA',
      'SEMANA': 'SEMANA',
      'D√çA': 'D√çA',
      'TOPOGRAF√çA': 'TOPOGRAF√çA',
      'HOJA': 'HOJA',
      'SERIE': 'SERIE',
      'ENSAYO': 'ENSAYO',
      'PROY': 'PROY',
      'RECOMEND': 'RECOMEND',
      'REPORTE': 'REPORTE',
      'PZA': 'PZA'
    };

    // Buscar en el mapeo
    if (tipo && mapeoTipos[tipo.toUpperCase()]) {
      return mapeoTipos[tipo.toUpperCase()];
    }

    // Unidades f√≠sicas b√°sicas
    if (descripcion?.includes('metro c√∫bico') || descripcion?.includes('m¬≥') || descripcion?.includes('m3')) return 'm3';
    if (descripcion?.includes('metro cuadrado') || descripcion?.includes('m¬≤') || descripcion?.includes('m2')) return 'm2';
    if (descripcion?.includes('cent√≠metro') || descripcion?.includes('cm')) return 'cm';
    if (descripcion?.includes('mililitro') || descripcion?.includes('mL')) return 'mL';
    if (descripcion?.includes('kil√≥metro') || descripcion?.includes('km')) return 'km';
    if (descripcion?.includes('metro') || descripcion?.includes(' m ')) return 'm';
    if (descripcion?.includes('hora') || descripcion?.includes(' h ')) return 'h';

    // Unidad por defecto
    return 'SERVICIO';
  }

  /**
   * Inserta un √°rea en la estructura jer√°rquica
   */
  private static insertarArea(area: AreaImportacion, estructura: AreaImportacion[], pila: AreaImportacion[]) {
    // Ajustar la pila seg√∫n el nivel
    while (pila.length >= area.nivel) {
      pila.pop();
    }

    if (pila.length === 0) {
      // Es √°rea ra√≠z
      estructura.push(area);
    } else {
      // Es sub√°rea
      const padre = pila[pila.length - 1];
      if (!padre.hijos) padre.hijos = [];
      padre.hijos.push(area);
    }

    pila.push(area);
  }

  /**
   * Agrega un concepto al √°rea m√°s reciente en la pila
   */
  private static agregarConceptoAArea(concepto: ConceptoImportacion, pila: AreaImportacion[]) {
    if (pila.length > 0) {
      const areaActual = pila[pila.length - 1];
      if (!areaActual.conceptos) areaActual.conceptos = [];
      areaActual.conceptos.push(concepto);
    }
  }

  /**
   * Guarda la estructura en la base de datos
   */
  static async guardarEstructura(estructura: AreaImportacion[]): Promise<void> {
    try {
      console.log('üöÄ Iniciando guardado de estructura:', estructura.length, '√°reas principales');
      
      // Obtener √°reas existentes
      const areasExistentes = await areasJerarquicasService.obtenerLista();
      const mapaAreasExistentes = new Map<string, number>();
      
      // Crear mapa de √°reas existentes por c√≥digo
      areasExistentes.forEach(area => {
        mapaAreasExistentes.set(area.codigo, area.id);
      });

      // Obtener conceptos existentes para evitar duplicados
      const conceptosExistentes = await conceptosJerarquicosService.obtenerLista();
      const codigosConceptosExistentes = new Set(conceptosExistentes.map(c => c.codigo));
      
      for (const area of estructura) {
        try {
          await this.guardarAreaRecursiva(area, null, mapaAreasExistentes, codigosConceptosExistentes);
        } catch (error) {
          console.error(`‚ùå Error guardando √°rea ${area.codigo}:`, error);
          // Continuar con las siguientes √°reas aunque una falle
        }
      }
      
      console.log('‚úÖ Estructura guardada exitosamente');
    } catch (error) {
      console.error('‚ùå Error general en guardarEstructura:', error);
      throw error;
    }
  }

  /**
   * Guarda un √°rea y sus hijos recursivamente
   */
  private static async guardarAreaRecursiva(
    area: AreaImportacion, 
    padreId: number | null, 
    areasExistentes: Map<string, number>,
    conceptosExistentes: Set<string>
  ): Promise<number> {
    let areaId: number;
    
    try {
      // Verificar si el √°rea ya existe
      if (areasExistentes.has(area.codigo)) {
        areaId = areasExistentes.get(area.codigo)!;
        console.log(`‚úÖ √Årea existente encontrada: ${area.codigo} - ${area.nombre}`);
      } else {
        // Crear el √°rea solo si no existe
        console.log(`üìù Creando nueva √°rea: ${area.codigo} - ${area.nombre}`);
        
        // Validar datos del √°rea antes de crear
        if (!area.codigo || !area.nombre) {
          throw new Error(`Datos de √°rea incompletos: c√≥digo="${area.codigo}", nombre="${area.nombre}"`);
        }
        
        const areaCreada = await areasJerarquicasService.crear({
          codigo: area.codigo,
          nombre: area.nombre,
          padreId,
          nivel: area.nivel
        });
        areaId = areaCreada.id;
        areasExistentes.set(area.codigo, areaId);
      }

      // Crear los conceptos de esta √°rea (solo los que no existen)
      if (area.conceptos && area.conceptos.length > 0) {
        console.log(`üìã Procesando ${area.conceptos.length} conceptos para √°rea ${area.codigo}`);
        
        for (const concepto of area.conceptos) {
          try {
            if (conceptosExistentes.has(concepto.codigo)) {
              console.log(`‚úÖ Concepto existente encontrado: ${concepto.codigo} - ${concepto.descripcion.substring(0, 50)}...`);
              continue;
            }
            
            // Validar datos del concepto antes de crear
            if (!concepto.codigo || !concepto.descripcion) {
              console.warn(`‚ö†Ô∏è Concepto con datos incompletos: c√≥digo="${concepto.codigo}", descripci√≥n="${concepto.descripcion}"`);
              continue;
            }
            
            console.log(`üìù Creando nuevo concepto: ${concepto.codigo} - ${concepto.descripcion.substring(0, 50)}...`);
            await conceptosJerarquicosService.crear({
              codigo: concepto.codigo,
              descripcion: concepto.descripcion,
              unidad: concepto.unidad || 'servicio',
              precioUnitario: concepto.precio?.toString() || '0',
              areaId: areaId
            });
            conceptosExistentes.add(concepto.codigo);
          } catch (error) {
            console.error(`‚ùå Error creando concepto ${concepto.codigo}:`, error);
            // Continuar con los siguientes conceptos aunque uno falle
          }
        }
      }

      // Crear las subareas recursivamente
      if (area.hijos && area.hijos.length > 0) {
        console.log(`üìÅ Procesando ${area.hijos.length} subareas para √°rea ${area.codigo}`);
        
        for (const hijo of area.hijos) {
          try {
            await this.guardarAreaRecursiva(hijo, areaId, areasExistentes, conceptosExistentes);
          } catch (error) {
            console.error(`‚ùå Error guardando subarea ${hijo.codigo}:`, error);
            // Continuar con las siguientes subareas aunque una falle
          }
        }
      }

      return areaId;
    } catch (error) {
      console.error(`‚ùå Error en guardarAreaRecursiva para √°rea ${area.codigo}:`, error);
      throw error;
    }
  }

  /**
   * Funci√≥n de demostraci√≥n con los datos que proporcionaste
   */
  static async importarDatosDemostracion(): Promise<void> {
    const datosDemo = `2	CONTROL DE CALIDAD
2.1	TERRACER√çAS
2.1.1	TRABAJOS DE CAMPO
2.1.1.1 (+)	"VISITA PARA DETERMINACI√ìN DE MASA VOLUM√âTRICA SECA DEL LUGAR (CALAS) Y GRADO DE COMPACTACI√ìN. INCLUYE: determinaci√≥n del contenido de agua en laboratorio, an√°lisis y reporte, con un m√°ximo de 5 ensayes (calas) y traslados. No incluye determinaci√≥n de masa volum√©trica seca m√°xima. Horario diurno de 8:00 a 17:00 h. (M√©todo acreditado)"	VISITA	3%	$1,231.53
2.1.1.2 (+)	ENSAYE ADICIONAL PARA LA DETERMINACI√ìN DEL GRADO DE COMPACTACI√ìN (LA MASA VOLUM√âTRICA SECA DEL LUGAR) (CALAS). INCLUYE: determinaci√≥n del contenido de agua (humedad) en laboratorio, an√°lisis y reporte. con una permanencia m√°xima de una hora. no incluye la determinaci√≥n de la masa volum√©trica seca m√°xima. (M√©todo acreditado)	PRUEBA	59%	$183.77
2.1.1.3 (+)	"VISITA A OBRA O BANCOS DE PR√âSTAMO DE MATERIALES PARA RECOLECCI√ìN DE MUESTREO, EN HORARIO DIURNO DE 8:00 A 17:00 h. INCLUYE: Muestreo, traslado de 30 minutos o 10 km como m√°ximo, en horario de 8:00 a 17:00 h. (M√©todo acreditado)"	VISITA	39%	$777.30
2.1.1.4	VISITA PARA ASESOR√çA en procedimiento constructivo y/o materiales utilizados en actividades de obra, en horario diurno de 8:00 a 17:00 h.	VISITA	4%	$1,060.02`;

    const estructura = this.procesarTextoPegado(datosDemo);
    await this.guardarEstructura(estructura);
  }
}

export default ImportadorConceptos;
